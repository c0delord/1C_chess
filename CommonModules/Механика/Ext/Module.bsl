Функция ПолучитьАлфавит()
	Возврат "ABCDEFGH";
КонецФункции

Функция ЧисловВСимвол(_числов) Экспорт
	алфавит = ПолучитьАлфавит();
	Возврат Сред(алфавит, _числов, 1);
КонецФункции

Функция СимволВЧисло(_символ) Экспорт
	алфавит = ПолучитьАлфавит();
	Возврат Найти(алфавит, _символ);
КонецФункции

Функция ПолучитьСимволФигуры(_фигура_тип, _цвет) Экспорт
	Если _цвет = Перечисления.Цвета.Белый Тогда
		Если _фигура_тип = Перечисления.ТипыФигур.Пешка Тогда
			Возврат "♙";
		ИначеЕсли _фигура_тип = Перечисления.ТипыФигур.Ладья Тогда
			Возврат "♖";
		ИначеЕсли _фигура_тип = Перечисления.ТипыФигур.Конь Тогда
			Возврат "♘";
		ИначеЕсли _фигура_тип = Перечисления.ТипыФигур.Слон Тогда
			Возврат "♗";
		ИначеЕсли _фигура_тип = Перечисления.ТипыФигур.Ферзь Тогда
			Возврат "♕";
		ИначеЕсли _фигура_тип = Перечисления.ТипыФигур.Король Тогда
			Возврат "♔";
		КонецЕсли;
	ИначеЕсли _цвет = Перечисления.Цвета.Черный Тогда
		Если _фигура_тип = Перечисления.ТипыФигур.Пешка Тогда
			Возврат "♟";
		ИначеЕсли _фигура_тип = Перечисления.ТипыФигур.Ладья Тогда
			Возврат "♜";
		ИначеЕсли _фигура_тип = Перечисления.ТипыФигур.Конь Тогда
			Возврат "♞";
		ИначеЕсли _фигура_тип = Перечисления.ТипыФигур.Слон Тогда
			Возврат "♝";
		ИначеЕсли _фигура_тип = Перечисления.ТипыФигур.Ферзь Тогда
			Возврат "♛";
		ИначеЕсли _фигура_тип = Перечисления.ТипыФигур.Король Тогда
			Возврат "♚";
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция НайтиФигуруПоТаблице(_таблица, _вертикаль, _горизонталь)
	Отбор = Новый Структура();
    Отбор.Вставить("КлеткаГоризонталь", _горизонталь);
	Отбор.Вставить("КлеткаВертикаль", _вертикаль);	
	клетки = _таблица.НайтиСтроки(Отбор);
	Если клетки.Количество() > 0 Тогда
		возврат клетки[0].Фигура;
	КонецЕсли;
КонецФункции

Функция СоздатьСтруктуруРасшифровки(_тип, _клетка, _клетка2 = Неопределено,_фигура = Неопределено, _фигура2 = Неопределено, _партия = Неопределено) Экспорт
	Если _тип = Перечисления.ТипыКоманд.ПеремещениеФигуры Тогда
		результат = Новый Структура();
		результат.Вставить("Тип", _тип);
		результат.Вставить("Источник", _клетка);
		результат.Вставить("Назначение", _клетка2);
		результат.Вставить("Фигура", _фигура);
		результат.Вставить("Партия", _партия);
		Возврат результат;
	ИначеЕсли _тип = Перечисления.ТипыКоманд.ВзятиеФигуры Тогда
		результат = Новый Структура();
		результат.Вставить("Тип", _тип);
		результат.Вставить("КлеткаИсточник", _клетка);
		результат.Вставить("КлеткаНазначение", _клетка2);
		результат.Вставить("ФигураИсточник", _фигура);
		результат.Вставить("ФигураНазначение", _фигура2);
		результат.Вставить("Партия", _партия);
		Возврат результат;
	ИначеЕсли _тип = Перечисления.ТипыКоманд.ВыборКлетки Тогда
		результат = Новый Структура();
		результат.Вставить("Тип", _тип);
		результат.Вставить("Источник", _клетка2);
		Возврат результат;
	КонецЕсли;
КонецФункции

Функция ОпределитьОчередность(_партия) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА НЕ ВложенныйЗапрос.Игрок ЕСТЬ NULL
		|			ТОГДА ВложенныйЗапрос.Игрок
		|		КОГДА Партии.ЦветХозяин = &ЦветБелый
		|			ТОГДА Партии.Хозяин
		|		КОГДА Партии.ЦветГость = &ЦветБелый
		|			ТОГДА Партии.Гость
		|	КОНЕЦ КАК Игрок
		|ИЗ
		|	Справочник.Партии КАК Партии
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВЫБОР
		|				КОГДА ХодыИгроковСрезПоследних.Фигура.Цвет = ХодыИгроковСрезПоследних.Партия.ЦветХозяин
		|					ТОГДА ХодыИгроковСрезПоследних.Партия.Гость
		|				КОГДА ХодыИгроковСрезПоследних.Фигура.Цвет = ХодыИгроковСрезПоследних.Партия.ЦветГость
		|					ТОГДА ХодыИгроковСрезПоследних.Партия.Хозяин
		|			КОНЕЦ КАК Игрок,
		|			ХодыИгроковСрезПоследних.Партия КАК Партия
		|		ИЗ
		|			РегистрСведений.ХодыИгроков.СрезПоследних КАК ХодыИгроковСрезПоследних) КАК ВложенныйЗапрос
		|		ПО Партии.Ссылка = ВложенныйЗапрос.Партия
		|ГДЕ
		|	Партии.Ссылка = &Партия";
	
	Запрос.УстановитьПараметр("Партия", _партия);
	Запрос.УстановитьПараметр("ЦветБелый", Перечисления.Цвета.Белый);
	
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Игрок;
	КонецЕсли;
КонецФункции

Функция ЭтоПеремещениеПоВертикалиИлиГоризонтали(_векторГоризонталь, _векторВертикаль)
	Возврат _векторГоризонталь * _векторВертикаль = 0;	
КонецФункции

Функция ЭтоПеремещениеПоДиагонали(_векторГоризонталь, _векторВертикаль)
	Возврат _векторВертикаль <> 0 И (_векторГоризонталь/_векторВертикаль = 1 Или _векторГоризонталь/_векторВертикаль = -1);
КонецФункции

Функция ЭтоДопустимоеПеремещение(_фигура, _источник, _назначение, _первый_ход = Истина, _это_взятие = Ложь, _тип_замены = Неопределено) Экспорт
	Если _источник = _назначение Тогда
		Возврат Ложь;
	КонецЕсли;
	
	типФигуры 			= ?(ЗначениеЗаполнено(_тип_замены), _тип_замены, _фигура.Тип);
	цветФигуры			= _фигура.Цвет;
	векторГоризонталь 	= _источник.Горизонталь - _назначение.Горизонталь;
	векторВертикаль		= СимволВЧисло(_источник.Вертикаль) - СимволВЧисло(_назначение.Вертикаль);
	Если типФигуры = Перечисления.ТипыФигур.Король Тогда
		Если векторГоризонталь <= 1 И векторГоризонталь >= -1
			И векторВертикаль <= 1 И векторВертикаль >= -1 Тогда
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли типФигуры = Перечисления.ТипыФигур.Ферзь Тогда
		Если ЭтоПеремещениеПоВертикалиИлиГоризонтали(векторГоризонталь, векторВертикаль)
			Или ЭтоПеремещениеПоДиагонали(векторГоризонталь, векторВертикаль) Тогда
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли типФигуры = Перечисления.ТипыФигур.Ладья Тогда
		Если ЭтоПеремещениеПоВертикалиИлиГоризонтали(векторГоризонталь, векторВертикаль) Тогда
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли типФигуры = Перечисления.ТипыФигур.Слон Тогда
		Если ЭтоПеремещениеПоДиагонали(векторГоризонталь, векторВертикаль) Тогда
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли типФигуры = Перечисления.ТипыФигур.Конь Тогда
		Если ((векторГоризонталь = 2 Или векторГоризонталь = -2) И  (векторВертикаль = 1 Или векторВертикаль = -1))
			Или ((векторГоризонталь = 1 Или векторГоризонталь = -1) И  (векторВертикаль = 2 Или векторВертикаль = -2)) Тогда
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли типФигуры = Перечисления.ТипыФигур.Пешка Тогда
		К = 1;
		Если цветФигуры = Перечисления.Цвета.Белый Тогда
			К = -1;
		ИначеЕсли цветФигуры = Перечисления.Цвета.Черный Тогда
			К = 1;
		КонецЕсли;
		
		Если (векторГоризонталь = 1*К И векторВертикаль = 0 И НЕ _это_взятие)
			Или (векторГоризонталь = 2*К И векторВертикаль = 0 И _первый_ход И НЕ _это_взятие)
			Или (векторГоризонталь = 1*К И (векторВертикаль = -1 Или векторВертикаль = 1) И _это_взятие) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;		
	Возврат Ложь;
КонецФункции

Функция ЭтоПервыйХодФигуры(_фигура, _партия) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ХодыИгроков.Регистратор ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоПервыйХод
		|ИЗ
		|	Справочник.Фигуры КАК Фигуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ХодыИгроков КАК ХодыИгроков
		|		ПО Фигуры.Ссылка = ХодыИгроков.Фигура
		|			И (ХодыИгроков.Партия = &Партия)
		|ГДЕ
		|	Фигуры.Ссылка = &Фигура";
	
	Запрос.УстановитьПараметр("Фигура", _фигура);
	Запрос.УстановитьПараметр("Партия", _партия);
	
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЭтоПервыйХод;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Функция НайтиФигурыМеждуКлетками(_источник, _назначение, _таб_партия)
	массивФигур = Новый Массив();
	
	векторГоризонталь 	= _источник.Горизонталь - _назначение.Горизонталь;
	векторВертикаль		= СимволВЧисло(_источник.Вертикаль) - СимволВЧисло(_назначение.Вертикаль);
	

	
	Если ЭтоПеремещениеПоДиагонали(векторГоризонталь, векторВертикаль) Тогда		
		шГ 	= ?(_назначение.Горизонталь < _источник.Горизонталь, 1, -1);
		шВ	= ?(СимволВЧисло(_назначение.Вертикаль) < СимволВЧисло(_источник.Вертикаль), 1, -1);
		счетГоризонталь	= _назначение.Горизонталь + шГ;
		счетВертикаль	= СимволВЧисло(_назначение.Вертикаль) + шВ;
		горизонтальДо 	= _источник.Горизонталь;
		вертикальДо 	= СимволВЧисло(_источник.Вертикаль);
		
		Пока счетГоризонталь <> горизонтальДо Или счетВертикаль <> вертикальДо Цикл
			элемент = НайтиФигуруПоТаблице(_таб_партия, ЧисловВСимвол(счетВертикаль), счетГоризонталь);
			Если ЗначениеЗаполнено(элемент) Тогда
				массивФигур.Добавить(элемент);
			КонецЕсли;
			счетГоризонталь	= счетГоризонталь + шГ;
			счетВертикаль	= счетВертикаль + шВ;
		КонецЦикла;	
	ИначеЕсли ЭтоПеремещениеПоВертикалиИлиГоризонтали(векторГоризонталь, векторВертикаль) Тогда
		горизонтальОт 	= Мин(_источник.Горизонталь, _назначение.Горизонталь);
		горизонтальДо 	= Макс(_источник.Горизонталь, _назначение.Горизонталь);
		вертикальОт 	= Мин(СимволВЧисло(_источник.Вертикаль), СимволВЧисло(_назначение.Вертикаль));
		вертикальДо 	= Макс(СимволВЧисло(_источник.Вертикаль), СимволВЧисло(_назначение.Вертикаль));
		
		
		Для Й = горизонтальОт+1 По горизонтальДо-1 Цикл
			элемент = НайтиФигуруПоТаблице(_таб_партия, ЧисловВСимвол(вертикальОт), Й);
			Если ЗначениеЗаполнено(элемент) Тогда
				массивФигур.Добавить(элемент);
			КонецЕсли;
		КонецЦикла;
		Для Й = вертикальОт+1 По вертикальДо-1 Цикл
			элемент = НайтиФигуруПоТаблице(_таб_партия, ЧисловВСимвол(Й), горизонтальОт);
			Если ЗначениеЗаполнено(элемент) Тогда
				массивФигур.Добавить(элемент);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат массивФигур;
КонецФункции

функция НайтиФигуруПоКлетке(_дата, _клетка, _партия) Экспорт
	Фигура = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СостояниеПартииСрезПоследних.Фигура КАК Фигура
		|ИЗ
		|	РегистрСведений.СостояниеПартии.СрезПоследних(
		|			&Дата,
		|			Партия = &Партия
		|				И Клетка = &Клетка) КАК СостояниеПартииСрезПоследних";
		
	Запрос.УстановитьПараметр("Дата", 	_дата);
	Запрос.УстановитьПараметр("Клетка", _клетка);
	Запрос.УстановитьПараметр("Партия", _партия);
		
	РезультатЗапроса 	= Запрос.Выполнить();	
	Выборка 			= РезультатЗапроса.Выбрать();
		
	Если Выборка.Следующий() Тогда
		Фигура = Выборка.Фигура;
	КонецЕсли;
	Возврат Фигура;
КонецФункции

Функция ЕстьЛиУгрозаКоролю(_таб_партия, _состояния_фигур, _цвет_игрока)
	результатУгроза = Ложь;
	Для Каждого клетка Из _таб_партия Цикл
		Если ЗначениеЗаполнено(клетка.Фигура) Тогда
			Если клетка.Фигура.Тип = Перечисления.ТипыФигур.Король И клетка.Фигура.Цвет = _цвет_игрока Тогда
				
				Для Каждого клеткаУгрозы Из _таб_партия Цикл 
					Если ЗначениеЗаполнено(клеткаУгрозы.Фигура) И клеткаУгрозы.Фигура.Цвет <> _цвет_игрока Тогда
						резХодаУгрозы = ОпределитьТипХода(клеткаУгрозы.Фигура, клеткаУгрозы.Клетка, клетка.Клетка, _таб_партия, _состояния_фигур, _цвет_игрока, Ложь);
						
						Если резХодаУгрозы = Перечисления.ТипыКоманд.ВзятиеФигуры Тогда
							результатУгроза = Истина;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;				
		КонецЕсли;
	КонецЦикла;	
	Возврат результатУгроза;	
КонецФункции

Функция ПроверкаДопустимостиРокировки(_фигура, _назначение, _таб_партия) // В РАЗРАБОТКЕ!
	
	Если _фигура.Тип = Перечисления.ТипыФигур.Король Тогда
		
	КонецЕсли;
	
	
	
КонецФункции

Функция ПроверкаДопустимостиПродвиженияПешки()
	Возврат Ложь;
КонецФункции

Функция СоздатьСостояниеПртииПослеХода(_фигура, _источник, _назначение, _таб_партия)
	состояниеПослеХода = _таб_партия.Скопировать();
	Для Каждого клеткаПосле Из состояниеПослеХода Цикл
		Если клеткаПосле.Клетка = _источник Тогда
			клеткаПосле.Фигура = Неопределено;
		ИначеЕсли клеткаПосле.Клетка = _назначение Тогда
			клеткаПосле.Фигура = _фигура;
		КонецЕсли;
	КонецЦикла;
	Возврат состояниеПослеХода;
КонецФункции

Функция ОпределитьТипХода(_фигура, _источник, _назначение, _таб_партия, _состояния_фигур, _цвет_игрока, _проверять_шах = Истина) Экспорт
	резТипХода = Перечисления.ТипыКоманд.ВыборКлетки;
	
	Если ЗначениеЗаполнено(_фигура) Тогда
		этоПервыйХода 	= Ложь;
		типЗаменыФигуры = Неопределено;
		элемСостояния 	= _состояния_фигур.Найти(_фигура, "Фигура");
		Если ЗначениеЗаполнено(элемСостояния) Тогда
			этоПервыйХода 	= элемСостояния.ЭтоПервыйХод;
			типЗаменыФигуры = элемСостояния.ЗамененаНаТип;
		КонецЕсли;
		
		элементыМежду	= НайтиФигурыМеждуКлетками(_источник, _назначение, _таб_партия);
		Если элементыМежду.Количество() = 0 Тогда
			
		
		
			//РОКИРОВКА
			//РУБКА ЧЕРЕЗ ХОД
			фигураНазначение 	= НайтиФигуруПоТаблице(_таб_партия, _назначение.Вертикаль, _назначение.Горизонталь);
			признакВзятия		= ЗначениеЗаполнено(фигураНазначение);
			

			Если ЭтоДопустимоеПеремещение(_фигура, _источник, _назначение, этоПервыйХода, признакВзятия, типЗаменыФигуры) Тогда
				
				
				Если признакВзятия Тогда
					Если фигураНазначение.Цвет <> _фигура.Цвет Тогда
						резТипХода = Перечисления.ТипыКоманд.ВзятиеФигуры;
					Иначе
						резТипХода = Перечисления.ТипыКоманд.ВыборКлетки;
					КонецЕсли;
				Иначе
					резТипХода = Перечисления.ТипыКоманд.ПеремещениеФигуры;
				КонецЕсли;
				
				
			КонецЕсли;
			
			//ПРОВЕРКА ШАХА
			Если _проверять_шах И Не резТипХода = Перечисления.ТипыКоманд.ВыборКлетки Тогда
				состояниеПослеХода = СоздатьСостояниеПртииПослеХода(_фигура, _источник, _назначение, _таб_партия);
				Если ЕстьЛиУгрозаКоролю(состояниеПослеХода, _состояния_фигур, _фигура.Цвет) Тогда
					резТипХода = Перечисления.ТипыКоманд.ВыборКлетки;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат резТипХода;
КонецФункции
